#*****************************************************************************************
# Vivado (TM) v2020.2 (64-bit)
#
# xs_uart.tcl: Tcl script for re-creating project 'xs_uart'
#
# Generated by Vivado on Tue Jul 13 17:22:06 CST 2021
# IP Build 3064653 on Wed Nov 18 14:17:31 MST 2020
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************

# Check file required for this script exists

set ip_dir "/nfs/home/wanghuizhe/xs_nanhu_fpga/XS_100NL_ST_V3_TAG_20211229"
set core_dir "/nfs/home/wanghuizhe/nanhu_cores/v90-build-default-1MBL2-2MBL3-alias-clkdiv-0417-all"

set cpu "nanhu"
set cpu_candidates [list "nanhu" "xiangshan" "dualcore"]

proc checkRequiredFiles {files} {
  set status true
  foreach ifile $files {
    if { ![file isfile $ifile] } {
      puts " Could not find file $ifile "
      set status false
    }
  }
  return $status
}

# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir "."

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set _xil_proj_name_ "xs_uart"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set _xil_proj_name_ $::user_project_name
}

variable script_file
set script_file "xs_uart.tcl"

# Help information for this script
proc print_help { cpu_candidates } {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--cpu {$cpu_candidates}\]"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--cpu {$cpu_candidates}\] Determine the cpu wanted to be"
  puts "                       synthesized. Default is yanqihu. Other cpu targets"
  puts "                       need to be generated from their Chisel project."
  puts "                       An adapted rocketchip is helpful for fast synth."
  puts "                       But the dts must be changed, and it is necessary so"
  puts "                       that we can distinguish the design in bitstream.\n"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < $::argc} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--cpu"          { incr i; set cpu [lindex $::argv $i] }
      "--origin_dir"   { incr i; set origin_dir [lindex $::argv $i] }
      "--project_name" { incr i; set _xil_proj_name_ [lindex $::argv $i] }
      "--ip_dir"       { incr i; set ip_dir [lindex $::argv $i] }
      "--core_dir"     { incr i; set core_dir [lindex $::argv $i] }
      "--help"         { print_help "$cpu_candidates" }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

# Set the directory path for the original project from where this script was exported
set orig_proj_dir "[file normalize "$origin_dir/"]"
set tcl_dir "[file normalize "$origin_dir/src/tcl"]"
set rtl_dir "[file normalize "$origin_dir/src/rtl"]"
set constr_dir "[file normalize "$origin_dir/src/constr"]"

source "$tcl_dir/ip_files_v3.tcl"
source "$tcl_dir/rtl_files_v3.tcl"
source "$tcl_dir/constraints.tcl"
source "$tcl_dir/defines.tcl"
source "$tcl_dir/include_dirs.tcl"

set cpu_hit "no"
foreach cpu_candidate $cpu_candidates {
  if {[string equal $cpu $cpu_candidate]} {
    set cpu_hit "yes"
  }
}
if {[string equal $cpu_hit "no"]} {
  puts "ERROR: Unknown cpu target '$cpu' specified by '--cpu', please select one from {$cpu_candidates}.\n"
  return 1
} else {
  source "$tcl_dir/cpu_${cpu}_files.tcl"
}

set xs_files [list {*}$cpu_files {*}$ip_files {*}$rtl_files]

# Check for paths and files needed for project creation
set validate_required 1
if { $validate_required } {
  if { [checkRequiredFiles $xs_files] } {
    puts "Tcl file $script_file is valid. All files required for project creation is accesable. "
  } else {
    puts "Tcl file $script_file is not valid. Not all files required for project creation is accesable. "
    return
  }
}

# Create project
create_project ${_xil_proj_name_} ./${_xil_proj_name_} -part xcvu19p-fsva3824-2-e

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Set project properties
set obj [current_project]
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "enable_vhdl_2008" -value "1" -objects $obj
set_property -name "ip_cache_permissions" -value "read write" -objects $obj
set_property -name "ip_output_repo" -value "$proj_dir/${_xil_proj_name_}.cache/ip" -objects $obj
set_property -name "mem.enable_memory_map_generation" -value "1" -objects $obj
set_property -name "part" -value "xcvu19p-fsva3824-2-e" -objects $obj
set_property -name "sim.central_dir" -value "$proj_dir/${_xil_proj_name_}.ip_user_files" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "source_mgmt_mode" -value "None" -objects $obj
set_property -name "webtalk.activehdl_export_sim" -value "6" -objects $obj
set_property -name "webtalk.ies_export_sim" -value "6" -objects $obj
set_property -name "webtalk.modelsim_export_sim" -value "6" -objects $obj
set_property -name "webtalk.questa_export_sim" -value "6" -objects $obj
set_property -name "webtalk.riviera_export_sim" -value "6" -objects $obj
set_property -name "webtalk.vcs_export_sim" -value "6" -objects $obj
set_property -name "webtalk.xsim_export_sim" -value "6" -objects $obj
set_property -name "xpm_libraries" -value "XPM_CDC XPM_MEMORY" -objects $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
add_files -norecurse -fileset $obj $xs_files

# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property -name "include_dirs" -value "$include_dirs" -objects $obj
set_property -name "top" -value "xs_fpga_top_debug" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj
set_property -name "verilog_define" -value "$defines" -objects $obj
source "$tcl_dir/global_includes.tcl"

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset object
set obj [get_filesets constrs_1]
# Add/Import constrs file and set constrs file properties
foreach constr $constr_files {
  set file_added [add_files -norecurse -fileset $obj [list $constr]]
  set_property -name "file_type" -value "XDC" -objects $file_added
}

# Set 'constrs_1' fileset properties
set obj [get_filesets constrs_1]
#set_property -name "target_constrs_file" -value "[get_files *new/pblock.xdc]" -objects $obj
#set_property -name "target_part" -value "xcvu19p-fsva3824-2-e" -objects $obj
#set_property -name "target_ucf" -value "[get_files *new/pblock.xdc]" -objects $obj

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]
set_property -name "hbs.configure_design_for_hier_access" -value "1" -objects $obj
set_property -name "top" -value "xs_fpga_top" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj

# Create BD cdc_ddr4
# source "$tcl_dir/cdc_ddr4.tcl"

# Create BD for JTAG and DDR4 Subsystem
# source "$tcl_dir/bd_jtag.tcl"
source "$tcl_dir/jtag_ddr_subsys.tcl"

# Create IP for Debug
# source "$tcl_dir/ahblite_axi_bridge_0.tcl"
source "$tcl_dir/blk_mem_gen_0.tcl"
source "$tcl_dir/vio_0.tcl"
source "$tcl_dir/xdma.tcl"
source "$tcl_dir/AXI_bridge.tcl"
source "$tcl_dir/data_bridge.tcl"
# source "$tcl_dir/pcie4c_uscale_plus_0.tcl"
# source "$tcl_dir/pcie_axi_axis_bd.tcl"
# source "$tcl_dir/axi_interconnect_0.tcl"

# Create 'synth_1' run (if not found)
if {[string equal [get_runs -quiet synth_1] ""]} {
    create_run -name synth_1 -part xcvu19p-fsva3824-2-e -flow {Vivado Synthesis 2020} -strategy "Vivado Synthesis Defaults" -report_strategy {No Reports} -constrset constrs_1
} else {
  set_property strategy "Vivado Synthesis Defaults" [get_runs synth_1]
  set_property flow "Vivado Synthesis 2020" [get_runs synth_1]
}
set obj [get_runs synth_1]
set_property -name "part" -value "xcvu19p-fsva3824-2-e" -objects $obj
#set_property -name "auto_incremental_checkpoint.directory" -value "/home/zyy/whz/ns_sdmmc_default_xs/ns_uart/ns_uart.srcs/utils_1/imports/sdmmc_xs" -objects $obj
set_property -name "strategy" -value "Vivado Synthesis Defaults" -objects $obj

# set the current synth run
current_run -synthesis [get_runs synth_1]

# Create 'impl_1' run (if not found)
if {[string equal [get_runs -quiet impl_1] ""]} {
    create_run -name impl_1 -part xcvu19p-fsva3824-2-e -flow {Vivado Implementation 2020} -strategy "Performance_ExplorePostRoutePhysOpt" -report_strategy {No Reports} -constrset constrs_1 -parent_run synth_1
} else {
  set_property strategy "Performance_ExplorePostRoutePhysOpt" [get_runs impl_1]
  set_property flow "Vivado Implementation 2020" [get_runs impl_1]
}
set obj [get_runs impl_1]
set_property -name "part" -value "xcvu19p-fsva3824-2-e" -objects $obj
#set_property -name "auto_incremental_checkpoint.directory" -value "/home/zyy/whz/ns_sdmmc_default_xs/ns_uart/ns_uart.srcs/utils_1/imports/sdmmc_xs_impl" -objects $obj
set_property -name "strategy" -value "Performance_ExplorePostRoutePhysOpt" -objects $obj
#set_property -name "steps.place_design.args.directive" -value "AltSpreadLogic_high" -objects $obj
#set_property -name "steps.phys_opt_design.args.directive" -value "AggressiveExplore" -objects $obj
#set_property -name "steps.route_design.args.directive" -value "AlternateCLBRouting" -objects $obj
set_property -name "steps.write_bitstream.args.readback_file" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.verbose" -value "0" -objects $obj

# set the current impl run
current_run -implementation [get_runs impl_1]

puts "INFO: Project created:${_xil_proj_name_}"
