#!/usr/bin/env python3

# This script performs weighted sum for SimPoint generated perf counter data.
#
# Requires csv files generated by perf.py
# and the following format:
#               , file1, file2, file3, file4, file5, file6, file7
# perf_cnt_name1, value1, value2, value3, value4, value5, value6, value7
# perf_cnt_name2, value1, value2, value3, value4, value5, value6, value7
# 
# The format of file name is <test case>_<cycle>_<weight>
# for example: astar_biglakes_800000000000_0.0500000000


import os
import re
import csv
import argparse


def fuse_perf_counter(input_filename, output_filename):
    '''
    Performs weighted sum for SimPoint generated perf counter data.
    '''

    header = []
    csv_data = []

    # Read in input csv file
    with open(input_filename, 'r') as f:
        reader = csv.reader(f)
        # Read header
        header = next(reader)
        header = header[1:] # Skip first column
        for row in reader:
            csv_data.append(row)

    # Parse test cases
    regex_parser = re.compile(r'(.*)_(\d+)_(.*)$') 
    test_cases = []
    test_cases_map = {} # {'test_case_name': [(index, weight)]}
    for idx, h in enumerate(header):
        m = regex_parser.match(h)
        if m is None:
            print('Invalid header: %s' % h)

        if m.group(1) not in test_cases:
            test_cases.append(m.group(1))
        if m.group(1) not in test_cases_map.keys():
            test_cases_map[m.group(1)] = []
        test_cases_map[m.group(1)].append((idx+1, float(m.group(3)))) # (index, weight) tuple

    fused_data = []
    for csv_index, csv_row in enumerate(csv_data):
        fused_data.append([csv_row[0]]) # Append a new row
        for _, v in test_cases_map.items():
            value = 0.0
            for index, weight in v:
                value += weight * int(csv_row[index])
            fused_data[csv_index].append(int(value))

    # Output results
    with open(output_filename, 'w') as f:
        writer = csv.writer(f)
        writer.writerow(["header.cases"] + test_cases)
        for csv_row in fused_data:
            writer.writerow(csv_row)

            




if __name__ == '__main__':
    # Parse command line arguments
    parser = argparse.ArgumentParser()
    parser.add_argument('--input', '-i', default="stats.csv", help="input csv file")
    parser.add_argument('--output', '-o', default="stats-fused.csv", help="output csv file")

    args = parser.parse_args()

    input_filename = args.input

    output_filename = args.output

    # Check input file exists
    if not os.path.isfile(input_filename):
        print('Input file %s does not exist' % input_filename)
        exit(1)

    fuse_perf_counter(input_filename, output_filename)

